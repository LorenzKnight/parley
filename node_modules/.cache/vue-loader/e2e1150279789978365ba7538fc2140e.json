{"remainingRequest":"/Users/lorenz/Documents/code/parley/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lorenz/node_modules/v-calendar-scheduler/components/dialog/EventDialogInput.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lorenz/node_modules/v-calendar-scheduler/components/dialog/EventDialogInput.vue","mtime":1529439629000},{"path":"/Users/lorenz/Documents/code/parley/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lorenz/Documents/code/parley/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lorenz/Documents/code/parley/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lorenz/Documents/code/parley/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport moment from 'moment';\nexport default {\n    name: \"EventDialogInput\",\n    props: {\n        value: [ Date, String, Number, Boolean, Array, Object ],\n        field: {\n            type: Object,\n            required: true\n        }\n    },\n    data() {\n        return {\n            newValue: this.value,\n        }\n    },\n    beforeMount() {\n        //  Date workaround\n        if ( this.field.type === 'date' && this.value ) {\n            this.newValue = moment(this.value).format().slice(0, 10);\n        }\n\n        //  Time workaround\n        if ( this.field.type === 'time' && this.value ) {\n            this.newValue = moment(this.value).format().slice(11, 16);\n        }\n    },\n    methods: {\n        onInput(event) {\n            this.$nextTick(() => {\n                this.newValue = event.target.value\n            });\n        }\n    },\n    watch: {\n        value(value) {\n            this.newValue = value;\n        },\n        newValue(value) {\n            let res = value;\n\n            if ( this.field.type === 'time' ) {\n                res = moment(this.newValue, \"HH:mm\");\n            }\n\n            this.$emit('input', res);\n        }\n    },\n    computed: {\n        isCheckOrRadio() {\n            return this.field.type === 'radio' || this.field.type === 'checkbox';\n        },\n        fieldLabel() {\n            return this.field.label ? this.field.label : this.field.name;\n        },\n        fieldClass() {\n            if ( this.overrideInputClass )\n                return this.inputClass;\n\n            let classes = [\n                'v-cal-input',\n                this.inputClass\n            ];\n\n            if ( this.isCheckOrRadio ) {\n\n                if ( !this.field.choices ) {\n                    classes.push('is-inline');\n                    classes.push('is-' + this.field.type);\n                } else {\n                    classes.push('v-cal-input-group');\n                }\n            }\n\n            return classes.join(' ');\n        }\n    }\n}\n",{"version":3,"sources":["EventDialogInput.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"EventDialogInput.vue","sourceRoot":"../../../node_modules/v-calendar-scheduler/components/dialog","sourcesContent":["<template>\r\n    <div :class=\"fieldClass\">\r\n        <template v-if=\"field.type === 'textarea'\">\r\n            <label :for=\"field.name\" v-if=\"field.showLabel !== false\">{{ fieldLabel }}</label>\r\n            <textarea\r\n                    @input=\"onInput\"\r\n                    :id=\"field.name\"\r\n                    :name=\"field.name\"\r\n                    :value=\"newValue\"\r\n                    :required=\"field.required\"\r\n                    :placeholder=\"fieldLabel\">\r\n            </textarea>\r\n        </template>\r\n        <template v-else>\r\n            <label :for=\"field.name\" v-if=\"field.showLabel !== false\">{{ fieldLabel }}</label>\r\n            <input\r\n                    @input=\"onInput\"\r\n                    :value=\"newValue\"\r\n                    :placeholder=\"fieldLabel\"\r\n                    :type=\"field.type ? field.type : 'text'\"\r\n                    :required=\"field.required\"\r\n                    :id=\"field.name\">\r\n        </template>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import moment from 'moment';\r\n    export default {\r\n        name: \"EventDialogInput\",\r\n        props: {\r\n            value: [ Date, String, Number, Boolean, Array, Object ],\r\n            field: {\r\n                type: Object,\r\n                required: true\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                newValue: this.value,\r\n            }\r\n        },\r\n        beforeMount() {\r\n            //  Date workaround\r\n            if ( this.field.type === 'date' && this.value ) {\r\n                this.newValue = moment(this.value).format().slice(0, 10);\r\n            }\r\n\r\n            //  Time workaround\r\n            if ( this.field.type === 'time' && this.value ) {\r\n                this.newValue = moment(this.value).format().slice(11, 16);\r\n            }\r\n        },\r\n        methods: {\r\n            onInput(event) {\r\n                this.$nextTick(() => {\r\n                    this.newValue = event.target.value\r\n                });\r\n            }\r\n        },\r\n        watch: {\r\n            value(value) {\r\n                this.newValue = value;\r\n            },\r\n            newValue(value) {\r\n                let res = value;\r\n\r\n                if ( this.field.type === 'time' ) {\r\n                    res = moment(this.newValue, \"HH:mm\");\r\n                }\r\n\r\n                this.$emit('input', res);\r\n            }\r\n        },\r\n        computed: {\r\n            isCheckOrRadio() {\r\n                return this.field.type === 'radio' || this.field.type === 'checkbox';\r\n            },\r\n            fieldLabel() {\r\n                return this.field.label ? this.field.label : this.field.name;\r\n            },\r\n            fieldClass() {\r\n                if ( this.overrideInputClass )\r\n                    return this.inputClass;\r\n\r\n                let classes = [\r\n                    'v-cal-input',\r\n                    this.inputClass\r\n                ];\r\n\r\n                if ( this.isCheckOrRadio ) {\r\n\r\n                    if ( !this.field.choices ) {\r\n                        classes.push('is-inline');\r\n                        classes.push('is-' + this.field.type);\r\n                    } else {\r\n                        classes.push('v-cal-input-group');\r\n                    }\r\n                }\r\n\r\n                return classes.join(' ');\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]}]}