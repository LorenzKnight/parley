{"remainingRequest":"/Users/lorenz/Documents/code/parley/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lorenz/Documents/code/parley/node_modules/v-calendar-scheduler/components/views/Week.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lorenz/Documents/code/parley/node_modules/v-calendar-scheduler/components/views/Week.vue","mtime":1529439522000},{"path":"/Users/lorenz/Documents/code/parley/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lorenz/Documents/code/parley/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lorenz/Documents/code/parley/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lorenz/Documents/code/parley/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport moment from 'moment';\nimport { EventBus } from '../EventBus';\nimport EventItem from '../EventItem';\nimport IsView from '../mixins/IsView';\nimport ShowsTimes from '../mixins/ShowsTimes';\n\nexport default {\n    name: \"week\",\n    mixins: [ IsView, ShowsTimes ],\n    components: { EventItem },\n    data() {\n        return {\n            days: [],\n            // newEvents: JSON.parse(JSON.stringify(this.events))\n        }\n    },\n    mounted() {\n        this.buildCalendar();\n    },\n    methods: {\n        timeClicked(data) {\n            EventBus.$emit('time-clicked', data)\n        },\n        buildCalendar() {\n            //  Reset events\n            // this.newEvents = JSON.parse(JSON.stringify(this.events));\n\n            this.days = [];\n\n            let now = moment();\n\n            let temp = moment( this.activeDate ).day(moment.localeData().firstDayOfWeek());\n            let w = temp.week();\n\n            this.days = [];\n\n            do {\n                const day = moment(temp);\n\n                const dayEvents = this.events.filter( e => e.date.isSame(day, 'day') )\n                    .sort( (a, b) => {\n                        if ( !a.startTime ) return -1;\n                        if ( !b.startTime ) return 1;\n                        return moment(a.startTime).format('HH') - moment(b.startTime).format('HH');\n                    });\n                const mappedEvents = dayEvents.map( event => {\n                    event.overlaps = dayEvents.filter( e => moment(event.startTime).isBetween( moment(e.startTime), moment(e.endTime) ) && e !== event ).length;\n                    return event;\n                });\n\n                let newDay = {\n                    d: day,\n                    isPast: temp.isBefore( now, 'day' ),\n                    isToday: temp.isSame( now, 'day' ),\n                    isDisabled: this.isDayDisabled(temp),\n                    availableTimes: this.times.map( time => moment(time).dayOfYear( day.dayOfYear() ) ),\n                    events: mappedEvents\n                };\n                this.days.push(newDay);\n\n                temp.add( 1, 'day' );\n            } while ( temp.week() === w );\n\n        }\n    },\n    watch: {\n        timeRange() {\n            this.buildCalendar();\n        }\n    }\n}\n",{"version":3,"sources":["Week.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Week.vue","sourceRoot":"node_modules/v-calendar-scheduler/components/views","sourcesContent":["<template>\r\n  <section class=\"v-cal-content\">\r\n    <div class=\"v-cal-weekdays\">\r\n      <div class=\"v-cal-weekdays__padding\">\r\n        <div class=\"v-cal-times\">\r\n          <!--Fake, hidden time-->\r\n          <div class=\"v-cal-hour\">00:00 <template v-if=\"use12\">PM</template></div>\r\n        </div>\r\n      </div>\r\n      <div class=\"v-cal-weekday__wrapper\">\r\n        <div class=\"v-cal-weekday-item\" v-for=\"day in days\">{{ day.d.format('ddd DD/MM') }}</div>\r\n      </div>\r\n    </div>\r\n    <div class=\"v-cal-days\">\r\n      <div class=\"v-cal-times\">\r\n        <div class=\"v-cal-hour all-day\">{{ allDayLabel }}</div>\r\n        <div class=\"v-cal-hour\" :class=\"{ 'is-now': time.isSame(now, 'hour') }\" v-for=\"time in times\">{{ time | formatTime(use12) }}</div>\r\n      </div>\r\n      <div class=\"v-cal-days__wrapper\">\r\n        <div class=\"v-cal-day v-cal-day--week\" v-for=\"day in days\" :class=\"{ 'is-today': day.isToday, 'is-disabled': day.isDisabled }\">\r\n\r\n          <div class=\"v-cal-day__hour-block all-day\"\r\n               @click=\"timeClicked({ date: day.d.toDate(), time: null })\">\r\n            <span class=\"v-cal-day__hour-block-fill\">00:00 <template v-if=\"use12\">PM</template></span>\r\n            <div class=\"v-cal-day__hour-content\">\r\n              <div class=\"v-cal-event-list\" :class=\"{'tiny-events': day.events.filter(e => !e.startTime).length > 2}\">\r\n\r\n                <event-item\r\n                        v-for=\"event, index in day.events.filter(e => !e.startTime)\"\r\n                        :key=\"index\"\r\n                        :event=\"event\"\r\n                        :has-dynamic-size=\"false\"\r\n                        :use12=\"use12\">\r\n                </event-item>\r\n\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"v-cal-day__hour-block\"\r\n               @click=\"timeClicked({ date: day.d.toDate(), time: time.hour() })\"\r\n               :class=\"[ time.hour() === now.hour() ? 'is-now' : '', hourClass ]\" v-for=\"time in day.availableTimes\">\r\n            <span class=\"v-cal-day__hour-block-fill\">{{ time | formatTime(use12) }}</span>\r\n            <div class=\"v-cal-day__hour-content\">\r\n              <div class=\"v-cal-event-list\">\r\n                <event-item\r\n                        v-for=\"event, index in day.events\"\r\n                        :key=\"index\"\r\n                        :event=\"event\"\r\n                        :use12=\"use12\"\r\n                        v-if=\"event.startTime && time.hours() === event.startTime.hours()\">\r\n                </event-item>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n</template>\r\n\r\n<script>\r\n    import moment from 'moment';\r\n    import { EventBus } from '../EventBus';\r\n    import EventItem from '../EventItem';\r\n    import IsView from '../mixins/IsView';\r\n    import ShowsTimes from '../mixins/ShowsTimes';\r\n\r\n    export default {\r\n        name: \"week\",\r\n        mixins: [ IsView, ShowsTimes ],\r\n        components: { EventItem },\r\n        data() {\r\n            return {\r\n                days: [],\r\n                // newEvents: JSON.parse(JSON.stringify(this.events))\r\n            }\r\n        },\r\n        mounted() {\r\n            this.buildCalendar();\r\n        },\r\n        methods: {\r\n            timeClicked(data) {\r\n                EventBus.$emit('time-clicked', data)\r\n            },\r\n            buildCalendar() {\r\n                //  Reset events\r\n                // this.newEvents = JSON.parse(JSON.stringify(this.events));\r\n\r\n                this.days = [];\r\n\r\n                let now = moment();\r\n\r\n                let temp = moment( this.activeDate ).day(moment.localeData().firstDayOfWeek());\r\n                let w = temp.week();\r\n\r\n                this.days = [];\r\n\r\n                do {\r\n                    const day = moment(temp);\r\n\r\n                    const dayEvents = this.events.filter( e => e.date.isSame(day, 'day') )\r\n                        .sort( (a, b) => {\r\n                            if ( !a.startTime ) return -1;\r\n                            if ( !b.startTime ) return 1;\r\n                            return moment(a.startTime).format('HH') - moment(b.startTime).format('HH');\r\n                        });\r\n                    const mappedEvents = dayEvents.map( event => {\r\n                        event.overlaps = dayEvents.filter( e => moment(event.startTime).isBetween( moment(e.startTime), moment(e.endTime) ) && e !== event ).length;\r\n                        return event;\r\n                    });\r\n\r\n                    let newDay = {\r\n                        d: day,\r\n                        isPast: temp.isBefore( now, 'day' ),\r\n                        isToday: temp.isSame( now, 'day' ),\r\n                        isDisabled: this.isDayDisabled(temp),\r\n                        availableTimes: this.times.map( time => moment(time).dayOfYear( day.dayOfYear() ) ),\r\n                        events: mappedEvents\r\n                    };\r\n                    this.days.push(newDay);\r\n\r\n                    temp.add( 1, 'day' );\r\n                } while ( temp.week() === w );\r\n\r\n            }\r\n        },\r\n        watch: {\r\n            timeRange() {\r\n                this.buildCalendar();\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"]}]}