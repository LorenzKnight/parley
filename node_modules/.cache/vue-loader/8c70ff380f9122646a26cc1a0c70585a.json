{"remainingRequest":"/Users/lorenz/Documents/code/parley/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lorenz/Documents/code/parley/node_modules/v-calendar-scheduler/components/VueScheduler.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lorenz/Documents/code/parley/node_modules/v-calendar-scheduler/components/VueScheduler.vue","mtime":1527723358000},{"path":"/Users/lorenz/Documents/code/parley/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lorenz/Documents/code/parley/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lorenz/Documents/code/parley/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lorenz/Documents/code/parley/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport Event from '../model/Event';\n\n\nimport config from '../utils/config';\nimport { defaultLabels, defaultViews } from '../utils/config';\n\nimport { EventBus } from './EventBus';\n\nimport moment from 'moment';\nimport Month from './views/Month';\nimport Week from './views/Week';\nimport Day from './views/Day';\n\nimport EventDialog from './dialog';\n\nexport default {\n    name: \"VueScheduler\",\n    components: { Month, Week, Day },\n    props: {\n        events: {\n            type: Array,\n            default: () => []\n        },\n        showTodayButton: {\n            type: Boolean,\n            default: () => config.showTodayButton\n        },\n        minDate: {\n            type: [Date, Object],\n            default: () => config.minDate\n        },\n        maxDate: {\n            type: [Date, Object],\n            default: () => config.maxDate\n        },\n        labels: {\n            type: Object,\n            default: () => config.labels,\n            validator(value) {\n                for (const labelKey in defaultLabels ) {\n                    if ( !value.hasOwnProperty(labelKey) ) {\n                        console.error('Missing prop label: ' + labelKey);\n                        return false;\n                    }\n                }\n                return true;\n            }\n        },\n        timeRange: {\n            type: Array,\n            default: () => config.timeRange,\n            validator(value) {\n                if ( value.length !== 2 || value[0] > value[1] || value[0] < 0 || value[1] > 23) {\n                    console.error('Invalid time range.');\n                    return false;\n                }\n                return true;\n            }\n        },\n        availableViews: {\n            type: Array,\n            default: () => config.availableViews,\n            validator (value) {\n                const possible = defaultViews;\n                let error = false;\n                value.forEach(view => {\n                    if ( possible.indexOf(view) === -1 ) {\n                        console.error('Invalid view: ' + view);\n                        error = true;\n                    }\n                });\n                return !error;\n            }\n        },\n        initialDate: {\n            type: [Date, Object],\n            default: () => config.initialDate\n        },\n        initialView: {\n            type: String,\n            default: () => config.initialView\n        },\n        use12: {\n            type: Boolean,\n            default: () => config.use12\n        },\n        showTimeMarker: {\n            type: Boolean,\n            default: () => config.showTimeMarker\n        },\n        eventDisplay: {\n            type: [String, Function],\n            default: () => config.eventDisplay\n        },\n        disableDialog: {\n            type: Boolean,\n            default: false\n        },\n        eventDialogConfig: {\n            type: Object,\n            default: () => { return {} }\n        }\n    },\n    data() {\n        return {\n            today: moment(),\n            activeView: '',\n            activeDate: null\n        }\n    },\n    mounted() {\n        //  Initial setup\n        this.activeView = this.initialView;\n        this.activeDate = moment(this.initialDate);\n\n        console.log('mounted');\n\n        //  Bind events\n        this.bindEvents();\n    },\n    beforeDestroy() {\n        EventBus.$off('day-clicked');\n        EventBus.$off('time-clicked');\n        EventBus.$off('event-clicked');\n    },\n    methods: {\n        openEventDialog(data) {\n            if ( !this.disableDialog ) {\n\n                const { fields, ...config } = this.eventDialogConfig;\n\n                if ( data instanceof Date ) {\n                    config.date = data\n                } else {\n                    config.date = data.date;\n                    config.startTime = data.time !== null ? moment(data.time, 'HH') : null;\n                    config.endTime = data.time !== null ? moment(data.time, 'HH').add(1, 'h') : null;\n                }\n\n                EventDialog.show(config, fields)\n                    .$on('event-created', (event) => {\n                        this.events.push(event._e);\n                        this.$emit('event-created', event._e);\n                    });\n\n                // EventDialog.show({\n                //     title: 'Custom dialog',\n                //     createButtonLabel: 'Save'\n                // }, [\n                //     // {\n                //     //     name: 'text_field',\n                //     //     label: 'Text field'\n                //     // },\n                //     // {\n                //     //     name: 'email',\n                //     //     type: 'email'\n                //     // },\n                //     // {\n                //     //     name: 'password',\n                //     //     type: 'password'\n                //     // },\n                //     // {\n                //     //     name: 'is_checked',\n                //     //     type: 'checkbox'    //  Unsupported for now\n                //     // },\n                //     // {\n                //     //     name: 'check_choices[]',\n                //     //     type: 'checkbox',           //  Unsupported for now\n                //     //     choices: [\n                //     //         { label: 'Choice 1', value: 'choice1' },\n                //     //         { label: 'Choice 2', value: 'choice2' }\n                //     //     ]\n                //     // },\n                //     // {\n                //     //     name: 'radio_choices',\n                //     //     type: 'radio',                //  Unsupported for now\n                //     //     choices: [\n                //     //         { label: 'Radio 1', value: 'rad1' },\n                //     //         { label: 'Radio 2', value: 'rad2' }\n                //     //     ]\n                //     // },\n                //     // {\n                //     //     name: 'textarea',\n                //     //     type: 'textarea'\n                //     // }\n                //     {\n                //         name: 'single-select',\n                //         type: 'select',                                              //  Unsupported for now\n                //         choices: [\n                //             { value: 'single1', label: 'Single list 1' },\n                //             { value: 'single2', label: 'Single list 2' },\n                //             { value: 'single3', label: 'Single list 3' },\n                //             { value: 'single4', label: 'Single list 4' },\n                //             { value: 'single5', label: 'Single list 5' }\n                //         ]\n                //     },\n                //     {\n                //         name: 'multiple-select',\n                //         type: 'select',                                                  //  Unsupported for now\n                //         choices: [\n                //             { value: 'multiple1', label: 'Multiple list 1' },\n                //             { value: 'multiple2', label: 'Multiple list 2' },\n                //             { value: 'multiple3', label: 'Multiple list 3' },\n                //             { value: 'multiple4', label: 'Multiple list 4' },\n                //             { value: 'multiple5', label: 'Multiple list 5' }\n                //         ],\n                //         multiple: true\n                //     }\n                // ]);\n            }\n        },\n        bindEvents() {\n            EventBus.$on('day-clicked', (date) => {\n                this.$emit('day-clicked', date);\n                this.openEventDialog(date);\n            });\n            EventBus.$on('time-clicked', (data) => {\n                this.$emit('time-clicked', data);\n                this.openEventDialog(data);\n            });\n            EventBus.$on('event-clicked', (event) => {\n                this.$emit('event-clicked', event._e);\n            });\n        },\n        goToToday() {\n            this.activeDate = moment(this.today);\n        },\n        prev() {\n            this.activeDate = moment(this.activeDate.subtract(1, this.activeView + 's'));\n        },\n        next() {\n            this.activeDate = moment(this.activeDate.add(1, this.activeView + 's'));\n        },\n        switchView(view) {\n            this.activeView = view;\n        },\n    },\n    filters: {\n        capitalizeFirstLetter(string) {\n            return string ? string.charAt(0).toUpperCase() + string.slice(1) : '';\n        }\n    },\n    watch: {\n        initialDate() {\n            this.activeDate = moment(this.initialDate);\n        },\n        initialView() {\n            this.activeView = this.initialView;\n        },\n        activeDate() {\n            this.$emit(this.activeView + '-changed', this.activeDate.toDate() );\n        },\n        activeView() {\n            this.$emit('view-changed', this.activeView);\n        }\n    },\n    computed: {\n        newEvents() {\n            return this.events.map(e => {\n                return new Event(e).bindGetter('displayText', this.eventDisplay);\n            });\n        },\n        isPrevAllowed() {\n            if ( this.minDate ) {\n                const prevRef = moment(this.activeDate).subtract(1, this.activeView + 's');\n                return this.minDate.isSameOrBefore(prevRef, this.activeView);\n            }\n            return true\n        },\n        isNextAllowed() {\n            if ( this.maxDate ) {\n                const afterRef = moment(this.activeDate).add(1, this.activeView + 's');\n                return this.maxDate.isSameOrAfter(afterRef, this.activeView);\n            }\n            return true\n        },\n        activeViewProps() {\n            let props = {\n                activeDate: this.activeDate,\n                minDate: this.minDate,\n                maxDate: this.maxDate,\n                use12: this.use12,\n                events: this.newEvents.filter( event => {\n                    return event.date.isSame(this.activeDate, this.activeView);\n                })\n            };\n\n            if ( this.activeView === 'week' || this.activeView === 'day') {\n                props.allDayLabel = this.labels.all_day;\n                props.timeRange = this.timeRange;\n                props.showTimeMarker = this.showTimeMarker;\n            }\n            return props;\n        },\n        calendarTitle() {\n\n            if ( this.activeDate === null )\n                return '';\n\n            if ( this.activeView === 'month') {\n                return this.activeDate.format('MMMM YYYY');\n            }\n\n            if ( this.activeView === 'week' ) {\n                const weekStart = moment(this.activeDate).day(0);\n                const weekEnd = moment(this.activeDate).day(6);\n                return weekStart.format('MMM D') + ' - ' + weekEnd.format('MMM D');\n            }\n\n            if ( this.activeView === 'day' ) {\n                return this.activeDate.format('dddd MMM D')\n            }\n        }\n    }\n}\n",{"version":3,"sources":["VueScheduler.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"VueScheduler.vue","sourceRoot":"node_modules/v-calendar-scheduler/components","sourcesContent":["<template>\r\n  <div class=\"v-cal\">\r\n    <header class=\"v-cal-header\">\r\n      <div class=\"v-cal-header__actions\">\r\n        <div class=\"actions-left\">\r\n          <button class=\"v-cal-button\" v-if=\"showTodayButton\" @click=\"goToToday\" :class=\"{ 'v-cal-button--is-active': activeDate && activeDate.isSame( today, 'day' )}\">{{ labels.today }}</button>\r\n          <button :disabled=\"!isPrevAllowed\" class=\"v-cal-button\" @click=\"prev\" v-html=\"labels.back\"></button>\r\n          <button :disabled=\"!isNextAllowed\" class=\"v-cal-button\" @click=\"next\" v-html=\"labels.next\"></button>\r\n        </div>\r\n        <div class=\"actions-right\">\r\n          <button class=\"v-cal-button\" v-for=\"view in availableViews\" @click=\"switchView(view)\" :class=\"{ 'v-cal-button--is-active': activeView === view }\" >{{ labels[view] | capitalizeFirstLetter }}</button>\r\n        </div>\r\n      </div>\r\n      <div class=\"v-cal-header__title-bar\">\r\n        <h3 class=\"v-cal-header__title\">{{ calendarTitle }}</h3>\r\n      </div>\r\n    </header>\r\n    <component\r\n            :is=\"activeView\"\r\n            :class=\"'v-cal-content--' + activeView\"\r\n            v-bind=\"activeViewProps\"\r\n    ></component>\r\n    <footer class=\"v-cal-footer\"></footer>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\n    import Event from '../model/Event';\r\n\r\n\r\n    import config from '../utils/config';\r\n    import { defaultLabels, defaultViews } from '../utils/config';\r\n\r\n    import { EventBus } from './EventBus';\r\n\r\n    import moment from 'moment';\r\n    import Month from './views/Month';\r\n    import Week from './views/Week';\r\n    import Day from './views/Day';\r\n\r\n    import EventDialog from './dialog';\r\n\r\n    export default {\r\n        name: \"VueScheduler\",\r\n        components: { Month, Week, Day },\r\n        props: {\r\n            events: {\r\n                type: Array,\r\n                default: () => []\r\n            },\r\n            showTodayButton: {\r\n                type: Boolean,\r\n                default: () => config.showTodayButton\r\n            },\r\n            minDate: {\r\n                type: [Date, Object],\r\n                default: () => config.minDate\r\n            },\r\n            maxDate: {\r\n                type: [Date, Object],\r\n                default: () => config.maxDate\r\n            },\r\n            labels: {\r\n                type: Object,\r\n                default: () => config.labels,\r\n                validator(value) {\r\n                    for (const labelKey in defaultLabels ) {\r\n                        if ( !value.hasOwnProperty(labelKey) ) {\r\n                            console.error('Missing prop label: ' + labelKey);\r\n                            return false;\r\n                        }\r\n                    }\r\n                    return true;\r\n                }\r\n            },\r\n            timeRange: {\r\n                type: Array,\r\n                default: () => config.timeRange,\r\n                validator(value) {\r\n                    if ( value.length !== 2 || value[0] > value[1] || value[0] < 0 || value[1] > 23) {\r\n                        console.error('Invalid time range.');\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n            },\r\n            availableViews: {\r\n                type: Array,\r\n                default: () => config.availableViews,\r\n                validator (value) {\r\n                    const possible = defaultViews;\r\n                    let error = false;\r\n                    value.forEach(view => {\r\n                        if ( possible.indexOf(view) === -1 ) {\r\n                            console.error('Invalid view: ' + view);\r\n                            error = true;\r\n                        }\r\n                    });\r\n                    return !error;\r\n                }\r\n            },\r\n            initialDate: {\r\n                type: [Date, Object],\r\n                default: () => config.initialDate\r\n            },\r\n            initialView: {\r\n                type: String,\r\n                default: () => config.initialView\r\n            },\r\n            use12: {\r\n                type: Boolean,\r\n                default: () => config.use12\r\n            },\r\n            showTimeMarker: {\r\n                type: Boolean,\r\n                default: () => config.showTimeMarker\r\n            },\r\n            eventDisplay: {\r\n                type: [String, Function],\r\n                default: () => config.eventDisplay\r\n            },\r\n            disableDialog: {\r\n                type: Boolean,\r\n                default: false\r\n            },\r\n            eventDialogConfig: {\r\n                type: Object,\r\n                default: () => { return {} }\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                today: moment(),\r\n                activeView: '',\r\n                activeDate: null\r\n            }\r\n        },\r\n        mounted() {\r\n            //  Initial setup\r\n            this.activeView = this.initialView;\r\n            this.activeDate = moment(this.initialDate);\r\n\r\n            console.log('mounted');\r\n\r\n            //  Bind events\r\n            this.bindEvents();\r\n        },\r\n        beforeDestroy() {\r\n            EventBus.$off('day-clicked');\r\n            EventBus.$off('time-clicked');\r\n            EventBus.$off('event-clicked');\r\n        },\r\n        methods: {\r\n            openEventDialog(data) {\r\n                if ( !this.disableDialog ) {\r\n\r\n                    const { fields, ...config } = this.eventDialogConfig;\r\n\r\n                    if ( data instanceof Date ) {\r\n                        config.date = data\r\n                    } else {\r\n                        config.date = data.date;\r\n                        config.startTime = data.time !== null ? moment(data.time, 'HH') : null;\r\n                        config.endTime = data.time !== null ? moment(data.time, 'HH').add(1, 'h') : null;\r\n                    }\r\n\r\n                    EventDialog.show(config, fields)\r\n                        .$on('event-created', (event) => {\r\n                            this.events.push(event._e);\r\n                            this.$emit('event-created', event._e);\r\n                        });\r\n\r\n                    // EventDialog.show({\r\n                    //     title: 'Custom dialog',\r\n                    //     createButtonLabel: 'Save'\r\n                    // }, [\r\n                    //     // {\r\n                    //     //     name: 'text_field',\r\n                    //     //     label: 'Text field'\r\n                    //     // },\r\n                    //     // {\r\n                    //     //     name: 'email',\r\n                    //     //     type: 'email'\r\n                    //     // },\r\n                    //     // {\r\n                    //     //     name: 'password',\r\n                    //     //     type: 'password'\r\n                    //     // },\r\n                    //     // {\r\n                    //     //     name: 'is_checked',\r\n                    //     //     type: 'checkbox'    //  Unsupported for now\r\n                    //     // },\r\n                    //     // {\r\n                    //     //     name: 'check_choices[]',\r\n                    //     //     type: 'checkbox',           //  Unsupported for now\r\n                    //     //     choices: [\r\n                    //     //         { label: 'Choice 1', value: 'choice1' },\r\n                    //     //         { label: 'Choice 2', value: 'choice2' }\r\n                    //     //     ]\r\n                    //     // },\r\n                    //     // {\r\n                    //     //     name: 'radio_choices',\r\n                    //     //     type: 'radio',                //  Unsupported for now\r\n                    //     //     choices: [\r\n                    //     //         { label: 'Radio 1', value: 'rad1' },\r\n                    //     //         { label: 'Radio 2', value: 'rad2' }\r\n                    //     //     ]\r\n                    //     // },\r\n                    //     // {\r\n                    //     //     name: 'textarea',\r\n                    //     //     type: 'textarea'\r\n                    //     // }\r\n                    //     {\r\n                    //         name: 'single-select',\r\n                    //         type: 'select',                                              //  Unsupported for now\r\n                    //         choices: [\r\n                    //             { value: 'single1', label: 'Single list 1' },\r\n                    //             { value: 'single2', label: 'Single list 2' },\r\n                    //             { value: 'single3', label: 'Single list 3' },\r\n                    //             { value: 'single4', label: 'Single list 4' },\r\n                    //             { value: 'single5', label: 'Single list 5' }\r\n                    //         ]\r\n                    //     },\r\n                    //     {\r\n                    //         name: 'multiple-select',\r\n                    //         type: 'select',                                                  //  Unsupported for now\r\n                    //         choices: [\r\n                    //             { value: 'multiple1', label: 'Multiple list 1' },\r\n                    //             { value: 'multiple2', label: 'Multiple list 2' },\r\n                    //             { value: 'multiple3', label: 'Multiple list 3' },\r\n                    //             { value: 'multiple4', label: 'Multiple list 4' },\r\n                    //             { value: 'multiple5', label: 'Multiple list 5' }\r\n                    //         ],\r\n                    //         multiple: true\r\n                    //     }\r\n                    // ]);\r\n                }\r\n            },\r\n            bindEvents() {\r\n                EventBus.$on('day-clicked', (date) => {\r\n                    this.$emit('day-clicked', date);\r\n                    this.openEventDialog(date);\r\n                });\r\n                EventBus.$on('time-clicked', (data) => {\r\n                    this.$emit('time-clicked', data);\r\n                    this.openEventDialog(data);\r\n                });\r\n                EventBus.$on('event-clicked', (event) => {\r\n                    this.$emit('event-clicked', event._e);\r\n                });\r\n            },\r\n            goToToday() {\r\n                this.activeDate = moment(this.today);\r\n            },\r\n            prev() {\r\n                this.activeDate = moment(this.activeDate.subtract(1, this.activeView + 's'));\r\n            },\r\n            next() {\r\n                this.activeDate = moment(this.activeDate.add(1, this.activeView + 's'));\r\n            },\r\n            switchView(view) {\r\n                this.activeView = view;\r\n            },\r\n        },\r\n        filters: {\r\n            capitalizeFirstLetter(string) {\r\n                return string ? string.charAt(0).toUpperCase() + string.slice(1) : '';\r\n            }\r\n        },\r\n        watch: {\r\n            initialDate() {\r\n                this.activeDate = moment(this.initialDate);\r\n            },\r\n            initialView() {\r\n                this.activeView = this.initialView;\r\n            },\r\n            activeDate() {\r\n                this.$emit(this.activeView + '-changed', this.activeDate.toDate() );\r\n            },\r\n            activeView() {\r\n                this.$emit('view-changed', this.activeView);\r\n            }\r\n        },\r\n        computed: {\r\n            newEvents() {\r\n                return this.events.map(e => {\r\n                    return new Event(e).bindGetter('displayText', this.eventDisplay);\r\n                });\r\n            },\r\n            isPrevAllowed() {\r\n                if ( this.minDate ) {\r\n                    const prevRef = moment(this.activeDate).subtract(1, this.activeView + 's');\r\n                    return this.minDate.isSameOrBefore(prevRef, this.activeView);\r\n                }\r\n                return true\r\n            },\r\n            isNextAllowed() {\r\n                if ( this.maxDate ) {\r\n                    const afterRef = moment(this.activeDate).add(1, this.activeView + 's');\r\n                    return this.maxDate.isSameOrAfter(afterRef, this.activeView);\r\n                }\r\n                return true\r\n            },\r\n            activeViewProps() {\r\n                let props = {\r\n                    activeDate: this.activeDate,\r\n                    minDate: this.minDate,\r\n                    maxDate: this.maxDate,\r\n                    use12: this.use12,\r\n                    events: this.newEvents.filter( event => {\r\n                        return event.date.isSame(this.activeDate, this.activeView);\r\n                    })\r\n                };\r\n\r\n                if ( this.activeView === 'week' || this.activeView === 'day') {\r\n                    props.allDayLabel = this.labels.all_day;\r\n                    props.timeRange = this.timeRange;\r\n                    props.showTimeMarker = this.showTimeMarker;\r\n                }\r\n                return props;\r\n            },\r\n            calendarTitle() {\r\n\r\n                if ( this.activeDate === null )\r\n                    return '';\r\n\r\n                if ( this.activeView === 'month') {\r\n                    return this.activeDate.format('MMMM YYYY');\r\n                }\r\n\r\n                if ( this.activeView === 'week' ) {\r\n                    const weekStart = moment(this.activeDate).day(0);\r\n                    const weekEnd = moment(this.activeDate).day(6);\r\n                    return weekStart.format('MMM D') + ' - ' + weekEnd.format('MMM D');\r\n                }\r\n\r\n                if ( this.activeView === 'day' ) {\r\n                    return this.activeDate.format('dddd MMM D')\r\n                }\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"]}]}